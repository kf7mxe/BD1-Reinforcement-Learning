# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bd1_environment_interface/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class State(genpy.Message):
  _md5sum = "afe803c2f32ba818ba517f29ac23821c"
  _type = "bd1_environment_interface/State"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 up_p_r
float64 up_p_l
float64 mid_p_r
float64 mid_p_l
float64 feet_p_r
float64 feet_p_l

#float64 up_v_r
#float64 up_v_l
#float64 mid_v_r
#float64 mid_v_l
#float64 feet_v_r
float64 feet_v_l

float64 neck_p
#float64 neck_v
float64 head_p
#float64 head_v

float64 pose_x
float64 pose_y
float64 pose_z
float64 rot_r
float64 rot_p
float64 rot_y

"""
  __slots__ = ['up_p_r','up_p_l','mid_p_r','mid_p_l','feet_p_r','feet_p_l','feet_v_l','neck_p','head_p','pose_x','pose_y','pose_z','rot_r','rot_p','rot_y']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       up_p_r,up_p_l,mid_p_r,mid_p_l,feet_p_r,feet_p_l,feet_v_l,neck_p,head_p,pose_x,pose_y,pose_z,rot_r,rot_p,rot_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.up_p_r is None:
        self.up_p_r = 0.
      if self.up_p_l is None:
        self.up_p_l = 0.
      if self.mid_p_r is None:
        self.mid_p_r = 0.
      if self.mid_p_l is None:
        self.mid_p_l = 0.
      if self.feet_p_r is None:
        self.feet_p_r = 0.
      if self.feet_p_l is None:
        self.feet_p_l = 0.
      if self.feet_v_l is None:
        self.feet_v_l = 0.
      if self.neck_p is None:
        self.neck_p = 0.
      if self.head_p is None:
        self.head_p = 0.
      if self.pose_x is None:
        self.pose_x = 0.
      if self.pose_y is None:
        self.pose_y = 0.
      if self.pose_z is None:
        self.pose_z = 0.
      if self.rot_r is None:
        self.rot_r = 0.
      if self.rot_p is None:
        self.rot_p = 0.
      if self.rot_y is None:
        self.rot_y = 0.
    else:
      self.up_p_r = 0.
      self.up_p_l = 0.
      self.mid_p_r = 0.
      self.mid_p_l = 0.
      self.feet_p_r = 0.
      self.feet_p_l = 0.
      self.feet_v_l = 0.
      self.neck_p = 0.
      self.head_p = 0.
      self.pose_x = 0.
      self.pose_y = 0.
      self.pose_z = 0.
      self.rot_r = 0.
      self.rot_p = 0.
      self.rot_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.up_p_r, _x.up_p_l, _x.mid_p_r, _x.mid_p_l, _x.feet_p_r, _x.feet_p_l, _x.feet_v_l, _x.neck_p, _x.head_p, _x.pose_x, _x.pose_y, _x.pose_z, _x.rot_r, _x.rot_p, _x.rot_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.up_p_r, _x.up_p_l, _x.mid_p_r, _x.mid_p_l, _x.feet_p_r, _x.feet_p_l, _x.feet_v_l, _x.neck_p, _x.head_p, _x.pose_x, _x.pose_y, _x.pose_z, _x.rot_r, _x.rot_p, _x.rot_y,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.up_p_r, _x.up_p_l, _x.mid_p_r, _x.mid_p_l, _x.feet_p_r, _x.feet_p_l, _x.feet_v_l, _x.neck_p, _x.head_p, _x.pose_x, _x.pose_y, _x.pose_z, _x.rot_r, _x.rot_p, _x.rot_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.up_p_r, _x.up_p_l, _x.mid_p_r, _x.mid_p_l, _x.feet_p_r, _x.feet_p_l, _x.feet_v_l, _x.neck_p, _x.head_p, _x.pose_x, _x.pose_y, _x.pose_z, _x.rot_r, _x.rot_p, _x.rot_y,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
