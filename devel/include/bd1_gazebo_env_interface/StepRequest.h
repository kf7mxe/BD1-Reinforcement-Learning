// Generated by gencpp from file bd1_gazebo_env_interface/StepRequest.msg
// DO NOT EDIT!


#ifndef BD1_GAZEBO_ENV_INTERFACE_MESSAGE_STEPREQUEST_H
#define BD1_GAZEBO_ENV_INTERFACE_MESSAGE_STEPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bd1_gazebo_env_interface
{
template <class ContainerAllocator>
struct StepRequest_
{
  typedef StepRequest_<ContainerAllocator> Type;

  StepRequest_()
    : step_duration_sec(0.0)
    , action()  {
    }
  StepRequest_(const ContainerAllocator& _alloc)
    : step_duration_sec(0.0)
    , action(_alloc)  {
  (void)_alloc;
    }



   typedef double _step_duration_sec_type;
  _step_duration_sec_type step_duration_sec;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StepRequest_

typedef ::bd1_gazebo_env_interface::StepRequest_<std::allocator<void> > StepRequest;

typedef boost::shared_ptr< ::bd1_gazebo_env_interface::StepRequest > StepRequestPtr;
typedef boost::shared_ptr< ::bd1_gazebo_env_interface::StepRequest const> StepRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator1> & lhs, const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator2> & rhs)
{
  return lhs.step_duration_sec == rhs.step_duration_sec &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator1> & lhs, const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bd1_gazebo_env_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e18c83a2373bd99092d97bd47bf7b38";
  }

  static const char* value(const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e18c83a2373bd99ULL;
  static const uint64_t static_value2 = 0x092d97bd47bf7b38ULL;
};

template<class ContainerAllocator>
struct DataType< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd1_gazebo_env_interface/StepRequest";
  }

  static const char* value(const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 step_duration_sec\n"
"float64[] action\n"
;
  }

  static const char* value(const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_duration_sec);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StepRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bd1_gazebo_env_interface::StepRequest_<ContainerAllocator>& v)
  {
    s << indent << "step_duration_sec: ";
    Printer<double>::stream(s, indent + "  ", v.step_duration_sec);
    s << indent << "action[]" << std::endl;
    for (size_t i = 0; i < v.action.size(); ++i)
    {
      s << indent << "  action[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.action[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BD1_GAZEBO_ENV_INTERFACE_MESSAGE_STEPREQUEST_H
