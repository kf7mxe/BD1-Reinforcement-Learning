// Generated by gencpp from file bd1_environment_interface/State.msg
// DO NOT EDIT!


#ifndef BD1_ENVIRONMENT_INTERFACE_MESSAGE_STATE_H
#define BD1_ENVIRONMENT_INTERFACE_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bd1_environment_interface
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : up_p_r(0.0)
    , up_p_l(0.0)
    , mid_p_r(0.0)
    , mid_p_l(0.0)
    , feet_p_r(0.0)
    , feet_p_l(0.0)
    , feet_v_l(0.0)
    , neck_p(0.0)
    , head_p(0.0)
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_z(0.0)
    , rot_r(0.0)
    , rot_p(0.0)
    , rot_y(0.0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : up_p_r(0.0)
    , up_p_l(0.0)
    , mid_p_r(0.0)
    , mid_p_l(0.0)
    , feet_p_r(0.0)
    , feet_p_l(0.0)
    , feet_v_l(0.0)
    , neck_p(0.0)
    , head_p(0.0)
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_z(0.0)
    , rot_r(0.0)
    , rot_p(0.0)
    , rot_y(0.0)  {
  (void)_alloc;
    }



   typedef double _up_p_r_type;
  _up_p_r_type up_p_r;

   typedef double _up_p_l_type;
  _up_p_l_type up_p_l;

   typedef double _mid_p_r_type;
  _mid_p_r_type mid_p_r;

   typedef double _mid_p_l_type;
  _mid_p_l_type mid_p_l;

   typedef double _feet_p_r_type;
  _feet_p_r_type feet_p_r;

   typedef double _feet_p_l_type;
  _feet_p_l_type feet_p_l;

   typedef double _feet_v_l_type;
  _feet_v_l_type feet_v_l;

   typedef double _neck_p_type;
  _neck_p_type neck_p;

   typedef double _head_p_type;
  _head_p_type head_p;

   typedef double _pose_x_type;
  _pose_x_type pose_x;

   typedef double _pose_y_type;
  _pose_y_type pose_y;

   typedef double _pose_z_type;
  _pose_z_type pose_z;

   typedef double _rot_r_type;
  _rot_r_type rot_r;

   typedef double _rot_p_type;
  _rot_p_type rot_p;

   typedef double _rot_y_type;
  _rot_y_type rot_y;





  typedef boost::shared_ptr< ::bd1_environment_interface::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bd1_environment_interface::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::bd1_environment_interface::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::bd1_environment_interface::State > StatePtr;
typedef boost::shared_ptr< ::bd1_environment_interface::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bd1_environment_interface::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bd1_environment_interface::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bd1_environment_interface::State_<ContainerAllocator1> & lhs, const ::bd1_environment_interface::State_<ContainerAllocator2> & rhs)
{
  return lhs.up_p_r == rhs.up_p_r &&
    lhs.up_p_l == rhs.up_p_l &&
    lhs.mid_p_r == rhs.mid_p_r &&
    lhs.mid_p_l == rhs.mid_p_l &&
    lhs.feet_p_r == rhs.feet_p_r &&
    lhs.feet_p_l == rhs.feet_p_l &&
    lhs.feet_v_l == rhs.feet_v_l &&
    lhs.neck_p == rhs.neck_p &&
    lhs.head_p == rhs.head_p &&
    lhs.pose_x == rhs.pose_x &&
    lhs.pose_y == rhs.pose_y &&
    lhs.pose_z == rhs.pose_z &&
    lhs.rot_r == rhs.rot_r &&
    lhs.rot_p == rhs.rot_p &&
    lhs.rot_y == rhs.rot_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bd1_environment_interface::State_<ContainerAllocator1> & lhs, const ::bd1_environment_interface::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bd1_environment_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bd1_environment_interface::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bd1_environment_interface::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_environment_interface::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_environment_interface::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_environment_interface::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_environment_interface::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bd1_environment_interface::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "afe803c2f32ba818ba517f29ac23821c";
  }

  static const char* value(const ::bd1_environment_interface::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xafe803c2f32ba818ULL;
  static const uint64_t static_value2 = 0xba517f29ac23821cULL;
};

template<class ContainerAllocator>
struct DataType< ::bd1_environment_interface::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd1_environment_interface/State";
  }

  static const char* value(const ::bd1_environment_interface::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bd1_environment_interface::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 up_p_r\n"
"float64 up_p_l\n"
"float64 mid_p_r\n"
"float64 mid_p_l\n"
"float64 feet_p_r\n"
"float64 feet_p_l\n"
"\n"
"#float64 up_v_r\n"
"#float64 up_v_l\n"
"#float64 mid_v_r\n"
"#float64 mid_v_l\n"
"#float64 feet_v_r\n"
"float64 feet_v_l\n"
"\n"
"float64 neck_p\n"
"#float64 neck_v\n"
"float64 head_p\n"
"#float64 head_v\n"
"\n"
"float64 pose_x\n"
"float64 pose_y\n"
"float64 pose_z\n"
"float64 rot_r\n"
"float64 rot_p\n"
"float64 rot_y\n"
"\n"
;
  }

  static const char* value(const ::bd1_environment_interface::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bd1_environment_interface::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.up_p_r);
      stream.next(m.up_p_l);
      stream.next(m.mid_p_r);
      stream.next(m.mid_p_l);
      stream.next(m.feet_p_r);
      stream.next(m.feet_p_l);
      stream.next(m.feet_v_l);
      stream.next(m.neck_p);
      stream.next(m.head_p);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.pose_z);
      stream.next(m.rot_r);
      stream.next(m.rot_p);
      stream.next(m.rot_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bd1_environment_interface::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bd1_environment_interface::State_<ContainerAllocator>& v)
  {
    s << indent << "up_p_r: ";
    Printer<double>::stream(s, indent + "  ", v.up_p_r);
    s << indent << "up_p_l: ";
    Printer<double>::stream(s, indent + "  ", v.up_p_l);
    s << indent << "mid_p_r: ";
    Printer<double>::stream(s, indent + "  ", v.mid_p_r);
    s << indent << "mid_p_l: ";
    Printer<double>::stream(s, indent + "  ", v.mid_p_l);
    s << indent << "feet_p_r: ";
    Printer<double>::stream(s, indent + "  ", v.feet_p_r);
    s << indent << "feet_p_l: ";
    Printer<double>::stream(s, indent + "  ", v.feet_p_l);
    s << indent << "feet_v_l: ";
    Printer<double>::stream(s, indent + "  ", v.feet_v_l);
    s << indent << "neck_p: ";
    Printer<double>::stream(s, indent + "  ", v.neck_p);
    s << indent << "head_p: ";
    Printer<double>::stream(s, indent + "  ", v.head_p);
    s << indent << "pose_x: ";
    Printer<double>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<double>::stream(s, indent + "  ", v.pose_y);
    s << indent << "pose_z: ";
    Printer<double>::stream(s, indent + "  ", v.pose_z);
    s << indent << "rot_r: ";
    Printer<double>::stream(s, indent + "  ", v.rot_r);
    s << indent << "rot_p: ";
    Printer<double>::stream(s, indent + "  ", v.rot_p);
    s << indent << "rot_y: ";
    Printer<double>::stream(s, indent + "  ", v.rot_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BD1_ENVIRONMENT_INTERFACE_MESSAGE_STATE_H
