// Generated by gencpp from file bd1_environment_interface/SetVectActionRequest.msg
// DO NOT EDIT!


#ifndef BD1_ENVIRONMENT_INTERFACE_MESSAGE_SETVECTACTIONREQUEST_H
#define BD1_ENVIRONMENT_INTERFACE_MESSAGE_SETVECTACTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bd1_environment_interface
{
template <class ContainerAllocator>
struct SetVectActionRequest_
{
  typedef SetVectActionRequest_<ContainerAllocator> Type;

  SetVectActionRequest_()
    : vector_action()  {
      vector_action.assign(0.0);
  }
  SetVectActionRequest_(const ContainerAllocator& _alloc)
    : vector_action()  {
  (void)_alloc;
      vector_action.assign(0.0);
  }



   typedef boost::array<double, 8>  _vector_action_type;
  _vector_action_type vector_action;





  typedef boost::shared_ptr< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetVectActionRequest_

typedef ::bd1_environment_interface::SetVectActionRequest_<std::allocator<void> > SetVectActionRequest;

typedef boost::shared_ptr< ::bd1_environment_interface::SetVectActionRequest > SetVectActionRequestPtr;
typedef boost::shared_ptr< ::bd1_environment_interface::SetVectActionRequest const> SetVectActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator1> & lhs, const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vector_action == rhs.vector_action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator1> & lhs, const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bd1_environment_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd5ea8395bbd5a6d6460390474bdccf0";
  }

  static const char* value(const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd5ea8395bbd5a6dULL;
  static const uint64_t static_value2 = 0x6460390474bdccf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd1_environment_interface/SetVectActionRequest";
  }

  static const char* value(const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# assume that they goas like\n"
"# [up_p_r mid_p_r feet_p_r up_p_l mid_p_l feet_p_l neck_p head_p]\n"
"float64[8] vector_action\n"
;
  }

  static const char* value(const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vector_action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetVectActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bd1_environment_interface::SetVectActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "vector_action[]" << std::endl;
    for (size_t i = 0; i < v.vector_action.size(); ++i)
    {
      s << indent << "  vector_action[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vector_action[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BD1_ENVIRONMENT_INTERFACE_MESSAGE_SETVECTACTIONREQUEST_H
