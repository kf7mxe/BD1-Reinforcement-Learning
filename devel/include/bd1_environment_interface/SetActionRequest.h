// Generated by gencpp from file bd1_environment_interface/SetActionRequest.msg
// DO NOT EDIT!


#ifndef BD1_ENVIRONMENT_INTERFACE_MESSAGE_SETACTIONREQUEST_H
#define BD1_ENVIRONMENT_INTERFACE_MESSAGE_SETACTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bd1_environment_interface
{
template <class ContainerAllocator>
struct SetActionRequest_
{
  typedef SetActionRequest_<ContainerAllocator> Type;

  SetActionRequest_()
    : up_p_r(0.0)
    , up_p_l(0.0)
    , mid_p_r(0.0)
    , mid_p_l(0.0)
    , feet_p_r(0.0)
    , feet_p_l(0.0)
    , up_v_r(0.0)
    , up_v_l(0.0)
    , mid_v_r(0.0)
    , mid_v_l(0.0)
    , feet_v_r(0.0)
    , feet_v_l(0.0)
    , neck_p(0.0)
    , neck_v(0.0)
    , head_p(0.0)
    , head_v(0.0)  {
    }
  SetActionRequest_(const ContainerAllocator& _alloc)
    : up_p_r(0.0)
    , up_p_l(0.0)
    , mid_p_r(0.0)
    , mid_p_l(0.0)
    , feet_p_r(0.0)
    , feet_p_l(0.0)
    , up_v_r(0.0)
    , up_v_l(0.0)
    , mid_v_r(0.0)
    , mid_v_l(0.0)
    , feet_v_r(0.0)
    , feet_v_l(0.0)
    , neck_p(0.0)
    , neck_v(0.0)
    , head_p(0.0)
    , head_v(0.0)  {
  (void)_alloc;
    }



   typedef double _up_p_r_type;
  _up_p_r_type up_p_r;

   typedef double _up_p_l_type;
  _up_p_l_type up_p_l;

   typedef double _mid_p_r_type;
  _mid_p_r_type mid_p_r;

   typedef double _mid_p_l_type;
  _mid_p_l_type mid_p_l;

   typedef double _feet_p_r_type;
  _feet_p_r_type feet_p_r;

   typedef double _feet_p_l_type;
  _feet_p_l_type feet_p_l;

   typedef double _up_v_r_type;
  _up_v_r_type up_v_r;

   typedef double _up_v_l_type;
  _up_v_l_type up_v_l;

   typedef double _mid_v_r_type;
  _mid_v_r_type mid_v_r;

   typedef double _mid_v_l_type;
  _mid_v_l_type mid_v_l;

   typedef double _feet_v_r_type;
  _feet_v_r_type feet_v_r;

   typedef double _feet_v_l_type;
  _feet_v_l_type feet_v_l;

   typedef double _neck_p_type;
  _neck_p_type neck_p;

   typedef double _neck_v_type;
  _neck_v_type neck_v;

   typedef double _head_p_type;
  _head_p_type head_p;

   typedef double _head_v_type;
  _head_v_type head_v;





  typedef boost::shared_ptr< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetActionRequest_

typedef ::bd1_environment_interface::SetActionRequest_<std::allocator<void> > SetActionRequest;

typedef boost::shared_ptr< ::bd1_environment_interface::SetActionRequest > SetActionRequestPtr;
typedef boost::shared_ptr< ::bd1_environment_interface::SetActionRequest const> SetActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator1> & lhs, const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.up_p_r == rhs.up_p_r &&
    lhs.up_p_l == rhs.up_p_l &&
    lhs.mid_p_r == rhs.mid_p_r &&
    lhs.mid_p_l == rhs.mid_p_l &&
    lhs.feet_p_r == rhs.feet_p_r &&
    lhs.feet_p_l == rhs.feet_p_l &&
    lhs.up_v_r == rhs.up_v_r &&
    lhs.up_v_l == rhs.up_v_l &&
    lhs.mid_v_r == rhs.mid_v_r &&
    lhs.mid_v_l == rhs.mid_v_l &&
    lhs.feet_v_r == rhs.feet_v_r &&
    lhs.feet_v_l == rhs.feet_v_l &&
    lhs.neck_p == rhs.neck_p &&
    lhs.neck_v == rhs.neck_v &&
    lhs.head_p == rhs.head_p &&
    lhs.head_v == rhs.head_v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator1> & lhs, const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bd1_environment_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "971ec173ddadd49b8b050bf728686fd8";
  }

  static const char* value(const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x971ec173ddadd49bULL;
  static const uint64_t static_value2 = 0x8b050bf728686fd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd1_environment_interface/SetActionRequest";
  }

  static const char* value(const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 up_p_r\n"
"float64 up_p_l\n"
"float64 mid_p_r\n"
"float64 mid_p_l\n"
"float64 feet_p_r\n"
"float64 feet_p_l\n"
"\n"
"float64 up_v_r\n"
"float64 up_v_l\n"
"float64 mid_v_r\n"
"float64 mid_v_l\n"
"float64 feet_v_r\n"
"float64 feet_v_l\n"
"\n"
"float64 neck_p\n"
"float64 neck_v\n"
"float64 head_p\n"
"float64 head_v\n"
;
  }

  static const char* value(const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.up_p_r);
      stream.next(m.up_p_l);
      stream.next(m.mid_p_r);
      stream.next(m.mid_p_l);
      stream.next(m.feet_p_r);
      stream.next(m.feet_p_l);
      stream.next(m.up_v_r);
      stream.next(m.up_v_l);
      stream.next(m.mid_v_r);
      stream.next(m.mid_v_l);
      stream.next(m.feet_v_r);
      stream.next(m.feet_v_l);
      stream.next(m.neck_p);
      stream.next(m.neck_v);
      stream.next(m.head_p);
      stream.next(m.head_v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bd1_environment_interface::SetActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bd1_environment_interface::SetActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "up_p_r: ";
    Printer<double>::stream(s, indent + "  ", v.up_p_r);
    s << indent << "up_p_l: ";
    Printer<double>::stream(s, indent + "  ", v.up_p_l);
    s << indent << "mid_p_r: ";
    Printer<double>::stream(s, indent + "  ", v.mid_p_r);
    s << indent << "mid_p_l: ";
    Printer<double>::stream(s, indent + "  ", v.mid_p_l);
    s << indent << "feet_p_r: ";
    Printer<double>::stream(s, indent + "  ", v.feet_p_r);
    s << indent << "feet_p_l: ";
    Printer<double>::stream(s, indent + "  ", v.feet_p_l);
    s << indent << "up_v_r: ";
    Printer<double>::stream(s, indent + "  ", v.up_v_r);
    s << indent << "up_v_l: ";
    Printer<double>::stream(s, indent + "  ", v.up_v_l);
    s << indent << "mid_v_r: ";
    Printer<double>::stream(s, indent + "  ", v.mid_v_r);
    s << indent << "mid_v_l: ";
    Printer<double>::stream(s, indent + "  ", v.mid_v_l);
    s << indent << "feet_v_r: ";
    Printer<double>::stream(s, indent + "  ", v.feet_v_r);
    s << indent << "feet_v_l: ";
    Printer<double>::stream(s, indent + "  ", v.feet_v_l);
    s << indent << "neck_p: ";
    Printer<double>::stream(s, indent + "  ", v.neck_p);
    s << indent << "neck_v: ";
    Printer<double>::stream(s, indent + "  ", v.neck_v);
    s << indent << "head_p: ";
    Printer<double>::stream(s, indent + "  ", v.head_p);
    s << indent << "head_v: ";
    Printer<double>::stream(s, indent + "  ", v.head_v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BD1_ENVIRONMENT_INTERFACE_MESSAGE_SETACTIONREQUEST_H
