// Generated by gencpp from file bd1_simple_moves/SetLegsRequest.msg
// DO NOT EDIT!


#ifndef BD1_SIMPLE_MOVES_MESSAGE_SETLEGSREQUEST_H
#define BD1_SIMPLE_MOVES_MESSAGE_SETLEGSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bd1_simple_moves
{
template <class ContainerAllocator>
struct SetLegsRequest_
{
  typedef SetLegsRequest_<ContainerAllocator> Type;

  SetLegsRequest_()
    : up_l(0.0)
    , up_r(0.0)
    , mid_l(0.0)
    , mid_r(0.0)
    , feet_l(0.0)
    , feet_r(0.0)
    , speed(0.0)  {
    }
  SetLegsRequest_(const ContainerAllocator& _alloc)
    : up_l(0.0)
    , up_r(0.0)
    , mid_l(0.0)
    , mid_r(0.0)
    , feet_l(0.0)
    , feet_r(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef double _up_l_type;
  _up_l_type up_l;

   typedef double _up_r_type;
  _up_r_type up_r;

   typedef double _mid_l_type;
  _mid_l_type mid_l;

   typedef double _mid_r_type;
  _mid_r_type mid_r;

   typedef double _feet_l_type;
  _feet_l_type feet_l;

   typedef double _feet_r_type;
  _feet_r_type feet_r;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLegsRequest_

typedef ::bd1_simple_moves::SetLegsRequest_<std::allocator<void> > SetLegsRequest;

typedef boost::shared_ptr< ::bd1_simple_moves::SetLegsRequest > SetLegsRequestPtr;
typedef boost::shared_ptr< ::bd1_simple_moves::SetLegsRequest const> SetLegsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator1> & lhs, const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.up_l == rhs.up_l &&
    lhs.up_r == rhs.up_r &&
    lhs.mid_l == rhs.mid_l &&
    lhs.mid_r == rhs.mid_r &&
    lhs.feet_l == rhs.feet_l &&
    lhs.feet_r == rhs.feet_r &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator1> & lhs, const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bd1_simple_moves

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d9a80bd490b256de1b51b4977337d66";
  }

  static const char* value(const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d9a80bd490b256dULL;
  static const uint64_t static_value2 = 0xe1b51b4977337d66ULL;
};

template<class ContainerAllocator>
struct DataType< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd1_simple_moves/SetLegsRequest";
  }

  static const char* value(const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 up_l\n"
"float64 up_r\n"
"float64 mid_l\n"
"float64 mid_r\n"
"float64 feet_l\n"
"float64 feet_r\n"
"float64 speed\n"
;
  }

  static const char* value(const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.up_l);
      stream.next(m.up_r);
      stream.next(m.mid_l);
      stream.next(m.mid_r);
      stream.next(m.feet_l);
      stream.next(m.feet_r);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLegsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bd1_simple_moves::SetLegsRequest_<ContainerAllocator>& v)
  {
    s << indent << "up_l: ";
    Printer<double>::stream(s, indent + "  ", v.up_l);
    s << indent << "up_r: ";
    Printer<double>::stream(s, indent + "  ", v.up_r);
    s << indent << "mid_l: ";
    Printer<double>::stream(s, indent + "  ", v.mid_l);
    s << indent << "mid_r: ";
    Printer<double>::stream(s, indent + "  ", v.mid_r);
    s << indent << "feet_l: ";
    Printer<double>::stream(s, indent + "  ", v.feet_l);
    s << indent << "feet_r: ";
    Printer<double>::stream(s, indent + "  ", v.feet_r);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BD1_SIMPLE_MOVES_MESSAGE_SETLEGSREQUEST_H
